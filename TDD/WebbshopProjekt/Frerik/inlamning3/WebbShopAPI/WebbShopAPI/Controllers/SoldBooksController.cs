using System.Collections.Generic;
using System.Linq;
using WebbShopAPI.Database;
using WebbShopAPI.Models;

namespace WebbShopAPI.Controllers
{
    /// <summary>
    /// Helper for managing any sold books
    /// </summary>
    public static class SoldBooksController
    {
        /// <summary>
        /// Get all items sold ever
        /// </summary>
        /// <param name="adminid">Administator performing the task</param>
        /// <returns>A list of all sold items</returns>
        public static List<SoldBooks> SoldItems(int adminid)
        {
            if (!UsersController.Ping(adminid) || !UsersController.IsAdmin(adminid))
                return null;

            var db = new WebbShopAPIContext();
            return db.SoldBooks.ToList();
        }

        /// <summary>
        /// Get how much money has been generated by selling books.
        /// </summary>
        /// <param name="adminid">Administator performing the task</param>
        /// <returns>A decimal value containing the total</returns>
        public static double MoneyEarned(int adminid)
        {
            if (!UsersController.Ping(adminid) || !UsersController.IsAdmin(adminid))
                return 0;

            var db = new WebbShopAPIContext();
            return db.SoldBooks.ToList().Sum(b => b.Price);
        }

        /// <summary>
        /// Get the customer that has generated the best income for the business
        /// </summary>
        /// <param name="adminid">Administator performing the task</param>
        /// <returns>The id of the user</returns>
        public static int BestCustomer(int adminid)
        {
            if (!UsersController.Ping(adminid) || !UsersController.IsAdmin(adminid))
                return 0;

            //https://entityframework.net/knowledge-base/6730974/select-most-frequent-value-using-linq            
            var db = new WebbShopAPIContext();
            return db.SoldBooks
                .GroupBy(s => s.UserId)
                .OrderByDescending(t => t.Count())
                .Take(1)
                .Select(u => u.Key).ToList()[0];
        }
    }
}
